nc 3aef2bbc.quals2018.oooverflow.io 31337

official - 194 pts - 15 teams
crypto, pwn

r = 717176011313651863916653928042381191778265177826
s = 2641052437588309316390144886363854091559752834
cmd = 'cat'

```
int __fastcall init_0(params *curve_constant_buf)
{
  int result; // eax@12
  FILE *stream; // [rsp+18h] [rbp-8h]@1

  _gmpz_init(curve_constant_buf);
  _gmpz_init(&curve_constant_buf->pubkey);
  _gmpz_init(&curve_constant_buf->p);
  _gmpz_init(&curve_constant_buf->q);
  _gmpz_init(&curve_constant_buf->g);
  stream = fopen("privkey", "r");
  if ( !stream )
  {
    puts("privkey not found. Contact the admins.");
    exit(1);
  }
  fgets(byte_203160, 100, stream);
  fclose(stream);
  if ( _gmpz_set_str(curve_constant_buf, byte_203160, 10LL) )
    _assert_fail("err == 0", "official.c", 0x5Au, "init_key");
  if ( _gmpz_set_str(
         &curve_constant_buf->pubkey,
         "128135682856750887590860168748824430714190353609169438003724812869569788088376999153566856518649548751808974042"
         "861313871720093923966663967385639616771013994922707548355367088446112595542221209828926608117506259743026809879"
         "227606814076195362151108590706375917914576011875357384956337974597411261584032533163073",
         10LL) )
  {
    _assert_fail("err == 0", "official.c", 0x5Cu, "init_key");
  }
  if ( _gmpz_set_str(
         &curve_constant_buf->p,
         "145774370140705743619288815016506936272601276321515267981294709325646228235350799641396853482542510455702593145"
         "365689674776551326526283561120782331775753481248764911686023024656237178221049671999816376444280423000085773391"
         "715885524862881877222848088840644737895543531766907185051846802894682811137086905085419",
         10LL) )
  {
    _assert_fail("err == 0", "official.c", 0x5Eu, "init_key");
  }
  if ( _gmpz_set_str(&curve_constant_buf->q, "739904609682520586736011252451716180456601329519", 10LL) )
    _assert_fail("err == 0", "official.c", 0x60u, "init_key");
  result = _gmpz_set_str(
             &curve_constant_buf->g,
             "52865703933600072480340150084328845769706702669400766904467248075164948743170867377627486621900744105555465"
             "05278304754167534364377708271927026135431224319545038958116629409705350633788443928213440576727331207693307"
             "0573084676163659758350542617531330447790290695414443063102502247168199735083467132847036144443",
             10LL);
  if ( result )
    _assert_fail("err == 0", "official.c", 0x62u, "init_key");
  return result;
}
```

```
size_t read_urandom()
{
  FILE *stream; // ST08_8@1

  stream = fopen("/dev/urandom", "rb");
  return fread(urandom_buf, 20uLL, 1uLL, stream);
}
```

```
__int64 reverse_urandom_buf()
{
  char v0; // ST03_1@2
  __int64 result; // rax@2
  signed int i; // [rsp+2h] [rbp-4h]@1

  for ( i = 0; i <= 9; ++i )
  {
    v0 = urandom_buf[i];
    urandom_buf[i] = urandom_buf[19 - i];
    result = 19 - i;
    urandom_buf[result] = v0;
  }
  return result;
}
```

```
__int64 __fastcall fread_stuff(__int64 a1, unsigned int a2)
{
  signed int i; // [rsp+18h] [rbp-8h]@1

  for ( i = 0; i < a2; ++i )
  {
    if ( (unsigned int)fread((void *)(i + a1), 1uLL, 1uLL, stdin) != 1 )
    {
      fwrite("fread fail\n", 1uLL, 0xBuLL, stderr);
      exit(1);
    }
    if ( *(_BYTE *)(i + a1) == 10 )
    {
      *(_BYTE *)(i + a1) = 0;
      return (unsigned int)i;
    }
  }
  *(_BYTE *)(i + a1) = 0;
  return (unsigned int)i;
}
```

```
void main_menu()
{
  char v0; // al@2
  unsigned int v1; // eax@2
  char i; // [rsp+1Fh] [rbp-1h]@1

  for ( i = 0; i != 'E'; printf("'%c' is not an official command\n", (unsigned int)i) )
  {
    read_urandom();
    puts("------------------- OFFICIAL MENU -------------------");
    puts("(S) sign");
    puts("(X) execute");
    puts("(E) exit");
    printf(format);
    v0 = fread_stuff_1();
    i = v0;
    v1 = v0 - 69;
    if ( v1 <= 0x33 )
      JUMPOUT(__CS__, (char *)dword_237C + (signed int)dword_237C[(unsigned __int64)v1]);
  }
}
```

```
int __fastcall sign(params *curve_constant_buf)
{
  int len_cmd; // [rsp+1Ch] [rbp-4h]@1

  printf("cmd:");
  len_cmd = fread_stuff((__int64)cmd, 0x100u);
  if ( !strncmp(cmd, "ls", 2uLL) )
    return sign_cmd((__int64)curve_constant_buf, (__int64)cmd, len_cmd);
  if ( !strncmp(cmd, "du", 2uLL) )
    return sign_cmd((__int64)curve_constant_buf, (__int64)cmd, len_cmd);
  if ( !strncmp(cmd, "stat", 4uLL) )
    return sign_cmd((__int64)curve_constant_buf, (__int64)cmd, len_cmd);
  return puts("nope.");
}
```

```
__int64 __fastcall sign_cmd(__int64 curve_constant_buf, __int64 cmd, __int64 len_cmd)
{
  __int64 len_cmd_1; // ST08_8@1
  char r; // [rsp+20h] [rbp-30h]@1
  char s; // [rsp+30h] [rbp-20h]@1
  __int64 v7; // [rsp+48h] [rbp-8h]@1

  len_cmd_1 = len_cmd;
  v7 = *MK_FP(__FS__, 40LL);
  _gmpz_init(&r);
  _gmpz_init(&s);
  real_sign((params *)curve_constant_buf, (__int64)&r, (__int64)&s, cmd, len_cmd_1);
  _gmp_printf((__int64)"r: %Zd\n", (__int64)&r);
  _gmp_printf((__int64)"s: %Zd\n", (__int64)&s);
  return *MK_FP(__FS__, 40LL) ^ v7;
}
```

```
__int64 __fastcall real_sign(params *curve_constants, __int64 r, __int64 s, __int64 cmd, __int64 len_cmd)
{
  __int64 s_1; // ST18_8@1
  __int64 cmd_1; // ST10_8@1
  __int64 len_cmd_1; // ST08_8@1
  char r_; // [rsp+30h] [rbp-A0h]@1
  char s_; // [rsp+40h] [rbp-90h]@1
  char nonce; // [rsp+50h] [rbp-80h]@1
  char invert_nonce; // [rsp+60h] [rbp-70h]@1
  char sha_cmd; // [rsp+70h] [rbp-60h]@1
  char r_mul_d; // [rsp+80h] [rbp-50h]@1
  char random; // [rsp+90h] [rbp-40h]@1
  __int64 v16; // [rsp+C8h] [rbp-8h]@1

  s_1 = s;
  cmd_1 = cmd;
  len_cmd_1 = len_cmd;
  v16 = *MK_FP(__FS__, 40LL);
  _gmpz_init(&r_);
  _gmpz_init(&s_);
  _gmpz_init(&nonce);
  _gmpz_init(&invert_nonce);
  _gmpz_init(&sha_cmd);
  _gmpz_init(&r_mul_d);
  reverse_urandom_buf();
  convert_to_hex((__int64)&random, (__int64)urandom_buf, 20uLL);
  _gmpz_set_str(&nonce, &random, 16LL);
  _gmpz_powm(&r_, &curve_constants->g, &nonce, &curve_constants->p);
  _gmpz_mod(&r_, &r_, &curve_constants->q);
  _gmpz_invert((__int64)&invert_nonce, (__int64)&nonce, (__int64)&curve_constants->q);
  sha1((__int64)&sha_cmd, cmd_1, len_cmd_1);
  _gmpz_mul(&r_mul_d, curve_constants, &r_);
  _gmpz_add(&s_, &sha_cmd, &r_mul_d);
  _gmpz_mul(&s_, &invert_nonce, &s_);
  _gmpz_mod(&s_, &s_, &curve_constants->q);
  _gmpz_set(r, &r_);
  _gmpz_set(s_1, &s_);
  return *MK_FP(__FS__, 40LL) ^ v16;
}
```


```
__int64 __fastcall execute(params *curve_constant_buf)
{
  int len_cmd; // ST1C_4@1
  char r_1; // [rsp+20h] [rbp-130h]@1
  char s_1; // [rsp+30h] [rbp-120h]@1
  char r; // [rsp+40h] [rbp-110h]@1
  char s; // [rsp+C0h] [rbp-90h]@1
  __int64 v7; // [rsp+148h] [rbp-8h]@1

  v7 = *MK_FP(__FS__, 40LL);
  printf("cmd:");
  len_cmd = fread_stuff((__int64)cmd, 0x100u);
  printf("r:", 256LL);
  fread_stuff((__int64)&r, 0x3Cu);
  printf("s:", 60LL);
  fread_stuff((__int64)&s, 0x3Cu);
  _gmpz_init(&r_1);
  _gmpz_init(&s_1);
  _gmpz_set_str(&r_1, &r, 10LL);
  _gmpz_set_str(&s_1, &s, 10LL);
  if ( (unsigned int)verify_sign(curve_constant_buf, (__int64)cmd, len_cmd, (__int64)&r_1, (__int64)&s_1) )
  {
    if ( !strncmp(cmd, "ls", 2uLL) )
    {
      system("ls flag");
    }
    else if ( !strncmp(cmd, "du", 2uLL) )
    {
      system("du flag");
    }
    else if ( !strncmp(cmd, "stat", 4uLL) )
    {
      system("stat flag");
    }
    else if ( !strncmp(cmd, "cat", 3uLL) )
    {
      system("cat flag");
    }
    else
    {
      puts("how did you get that?");
    }
  }
  else
  {
    puts("you are not official");
  }
  return *MK_FP(__FS__, 40LL) ^ v7;
}
```

```
__int64 __fastcall main(__int64 a1, char **a2, char **a3)
{
  params *malloc_ptr; // ST08_8@1

  setbuf(stdin, 0LL);
  setbuf(stdout, 0LL);
  setbuf(stderr, 0LL);
  malloc_ptr = (params *)malloc(0x50uLL);
  init_0(malloc_ptr);
  main_menu();
  puts("Offical bye bye.");
  return 0LL;
}
```

```
signed __int64 __fastcall verify_sign(params *curve_constant_buf, __int64 cmd, __int64 len_cmd, __int64 r, __int64 s)
{
  signed __int64 result; // rax@3
  __int64 v6; // rsi@10
  __int64 s_; // [rsp+8h] [rbp-A8h]@1
  __int64 r_; // [rsp+10h] [rbp-A0h]@1
  __int64 cmdlen; // [rsp+18h] [rbp-98h]@1
  char v; // [rsp+30h] [rbp-80h]@7
  char w; // [rsp+40h] [rbp-70h]@7
  char sha_cmd; // [rsp+50h] [rbp-60h]@7
  char u1; // [rsp+60h] [rbp-50h]@7
  char u2; // [rsp+70h] [rbp-40h]@7
  char v15; // [rsp+80h] [rbp-30h]@7
  char v16; // [rsp+90h] [rbp-20h]@7
  __int64 v17; // [rsp+A8h] [rbp-8h]@1

  cmdlen = len_cmd;
  r_ = r;
  s_ = s;
  v17 = *MK_FP(__FS__, 40LL);
  if ( *(_DWORD *)(r + 4) > 0 && _gmpz_cmp(r, &curve_constant_buf->q) < 0 )
  {
    if ( *(_DWORD *)(s_ + 4) > 0 && _gmpz_cmp(s_, &curve_constant_buf->q) < 0 )
    {
      _gmpz_init(&v);
      _gmpz_init(&w);
      _gmpz_init(&sha_cmd);
      _gmpz_init(&u1);
      _gmpz_init(&u2);
      _gmpz_init(&v15);
      _gmpz_init(&v16);
      _gmpz_invert((__int64)&w, s_, (__int64)&curve_constant_buf->q);
      sha1((__int64)&sha_cmd, cmd, cmdlen);
      _gmpz_mul(&u1, &sha_cmd, &w);
      _gmpz_mod(&u1, &u1, &curve_constant_buf->q);
      _gmpz_mul(&u2, r_, &w);
      _gmpz_mod(&u2, &u2, &curve_constant_buf->q);
      _gmpz_powm(&v15, &curve_constant_buf->g, &u1, &curve_constant_buf->p);
      _gmpz_powm(&v16, &curve_constant_buf->pubkey, &u2, &curve_constant_buf->p);
      _gmpz_mul(&v, &v15, &v16);
      _gmpz_mod(&v, &v, &curve_constant_buf->p);
      _gmpz_mod(&v, &v, &curve_constant_buf->q);
      if ( _gmpz_cmp(&v, r_) )
      {
        puts("not valid");
        result = 0LL;
      }
      else
      {
        puts("OK");
        result = 1LL;
      }
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    result = 0LL;
  }
  v6 = *MK_FP(__FS__, 40LL) ^ v17;
  return result;
}
```

```
(env) [defconquals2018-official]> python get_data.py interact
[+] Opening connection to 3aef2bbc.quals2018.oooverflow.io on port 31337: Done
[*] POW Challenge: 7rVwoiN0yN 22
[*] POW Solution: 890897
[*] Switching to interactive mode

------------------- OFFICIAL MENU -------------------
(S) sign
(X) execute
(E) exit
> $ X
cmd:$ cat
r:$ 175672136897532857177216578242788547073729326124
s:$ 301997289336897032672653458915890188389476020087
OK
OOO{wh0_n33d5_l34k5_wh3n_y0u_c4n_f4ul7_1nj3c7?}
------------------- OFFICIAL MENU -------------------
(S) sign
(X) execute
(E) exit
> $ E
Offical bye bye.
[*] Got EOF while reading in interactive
$
$
[*] Closed connection to 3aef2bbc.quals2018.oooverflow.io port 31337
[*] Got EOF while sending in interactive
```
